from datetime import datetime
import json
import logging
from os import path
import pytz
from typing import Iterable

import numpy as np
import rethinkdb as r
import yaml

import cxflow as cx
from cxflow.hooks import AbstractHook

from .utils import insert


class RethinkDBHook(AbstractHook):
    """
    Stores the training configuration and progress to RethinkDB.
    
    The access is configured by the credentials file, which must be protected. The configuration directly via config
    is not supported as the configs are commonly in git.
    
    -------------------------------------------------------
    The saved document structure:
    -------------------------------------------------------
    {
        id: RethinkDB id
        timestamp: document creation timestamp 
        config: the cxflow config (after CLI application)
        user: username
        training: [
            {
                timestamp: epoch update timestamp
                epoch_id: id of the epoch
                epoch_data: the `epoch_data` object 
            }, 
            ...
        ]
    }
    -------------------------------------------------------
    
    -------------------------------------------------------
    Example usage in config
    -------------------------------------------------------
    - cxflow_rethinkdb.RethinkDBHook:
        credentials_file: local/rethinkdb-credentials.json
        db: my_database
        table: my_table
    -------------------------------------------------------
       
    -------------------------------------------------------
    Example usage in config (log only accuracy variable)
    -------------------------------------------------------
    - cxflow_rethinkdb.RethinkDBHook:
        credentials_file: local/rethinkdb-credentials.json
        db: my_database
        table: my_table
      variables:
        - accuracy
    -------------------------------------------------------

    -------------------------------------------------------
    Where `local_config/rethinkdb-credentials.json` is a text file containing:
    -------------------------------------------------------
    {
      "host": "database.url.com",
      "port": 28016,
      "user": "JohnWick",
      "password": "SuperPassword123?"
    }
    -------------------------------------------------------

    """

    UNKNOWN_TYPE_ACTIONS = ['error', 'warn', 'ignore']
    """Posible actions to take on unknown variable type."""

    def __init__(self, output_dir: str, credentials_file: str, db: str, table: str, config_file: str='config.yaml',
                 rethink_key_file: str='rethink_key.json', variables: Iterable[str]=None,
                 on_unknown_type: str='ignore', **kwargs):
        """
        Save training config to database `configs`. Save the unique id generated by the database.
        :param output_dir: output (logging) directory
        :param config: the whole configuration file
        :param credentials_file: path to JSON credentials file which contains fields: host, port, user, password, db.
                                 This file must not be included in git.
        :param table: database table in which the results will be stored
        """

        assert on_unknown_type in RethinkDBHook.UNKNOWN_TYPE_ACTIONS

        self._variables = variables
        self._on_unknown_type = on_unknown_type

        super().__init__(output_dir=output_dir, **kwargs)

        self._table = table
        self._db = db

        with open(credentials_file, 'r') as file:
            self._credentials = json.load(file)

        with open(path.join(output_dir, config_file), 'r') as config_f:
            config = yaml.load(config_f)

        logging.debug('Creating training document in the db')
        response = insert(credentials=self._credentials, db_name=self._db, table_name=self._table,
                          document={'config': config,
                                    'training': [],
                                    'timestamp': r.expr(datetime.now(pytz.utc)),
                                    'user': self._credentials['user']})
        if response['errors'] > 0:
            logging.error('Error: %s', response['errors'])
            return
        if response['inserted'] != 1:
            logging.error('Inserted unexpected number of documents: %s', response['inserted'])
            return
        self._rethink_id = response['generated_keys'][0]
        logging.debug('Created config: %s', self._rethink_id)

        rethink_id_file = path.join(output_dir, rethink_key_file)
        logging.info('Saving document id to `%s`', rethink_id_file)
        with open(rethink_id_file, 'w') as file:
            json.dump({'rethink_id': self._rethink_id}, file)

    @staticmethod
    def _to_json_serializable(data):
        """Make a dict containing numpy arrays/scalars JSON serializable."""

        if isinstance(data, dict):
            return {key: RethinkDBHook._to_json_serializable(value) for key, value in data.items()}
        elif isinstance(data, list):
            return [RethinkDBHook._to_json_serializable(v) for v in data]
        elif isinstance(data, np.ndarray):
            return data.tolist()
        if isinstance(data, np.generic):
            return np.asscalar(data)
        elif np.isscalar(data):
            return data
        else:
            raise ValueError('Unsupported JSON type `{}` (key `{}`)'.format(type(data), data))

    def _build_data_dict(self, epoch_data: cx.EpochData):
        """TODO: doc"""

        result = {}
        for stream_name in epoch_data.keys():
            result[stream_name] = {}
            stream_data = epoch_data[stream_name]
            variables = self._variables if self._variables is not None else stream_data.keys()
            for variable in variables:
                if variable not in stream_data:
                    raise KeyError('Variable `{}` to be logged was not found in the batch data for stream `{}`. '
                                   'Available variables are `{}`.'.format(variable, stream_name, stream_data.keys()))
                value = stream_data[variable]
                try:
                    result[stream_name][variable] = RethinkDBHook._to_json_serializable(value)
                except ValueError as ex:
                    if self._on_unknown_type == 'error':
                        raise TypeError('Variable type `{}` can not be logged. Variable name: `{}`.'
                                        .format(type(value).__name__, variable)) from ex
                    elif self._on_unknown_type == 'warn':
                        logging.warning('Variable type `%s` can not be logged. Variable name: `%s`.',
                                        type(value).__name__, variable)
        return result

    def after_epoch(self, epoch_id: int, epoch_data: cx.EpochData, **kwargs) -> None:
        logging.info('Rethink: after epoch %d', epoch_id)

        with r.connect(**self._credentials) as conn:
            item = {'timestamp': r.expr(datetime.now(pytz.utc)),
                    'epoch_id': epoch_id,
                    'epoch_data': self._build_data_dict(epoch_data)}

            response = r.db(self._db)\
                        .table(self._table)\
                        .get(self._rethink_id)\
                        .update({'training': r.row['training'].append(item)})\
                        .run(conn)

            if response['errors'] > 0:
                logging.error('Error: %s', response['errors'])
                return
            if response['replaced'] != 1:
                logging.error('Modified unexpected number of documents: %s instead of 1', response['replaced'])
                return
            logging.debug('Appended train. progress to: %s', self._rethink_id)
